// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace appGIUCT.Migrations
{
    [DbContext(typeof(GIUCTDbContext))]
    [Migration("20231126024740_MigracionInicial")]
    partial class MigracionInicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("FormacionAcademicaPerson", b =>
                {
                    b.Property<int>("formacionAcademicasId")
                        .HasColumnType("int");

                    b.Property<int>("personId")
                        .HasColumnType("int");

                    b.HasKey("formacionAcademicasId", "personId");

                    b.HasIndex("personId");

                    b.ToTable("FormacionAcademicaPerson");
                });

            modelBuilder.Entity("IniciativaDeInvestigacionPerson", b =>
                {
                    b.Property<int>("iniciativaDeInvestigacionsId")
                        .HasColumnType("int");

                    b.Property<int>("personId")
                        .HasColumnType("int");

                    b.HasKey("iniciativaDeInvestigacionsId", "personId");

                    b.HasIndex("personId");

                    b.ToTable("IniciativaDeInvestigacionPerson");
                });

            modelBuilder.Entity("PersonPid", b =>
                {
                    b.Property<int>("personId")
                        .HasColumnType("int");

                    b.Property<int>("pidsId")
                        .HasColumnType("int");

                    b.HasKey("personId", "pidsId");

                    b.HasIndex("pidsId");

                    b.ToTable("PersonPid");
                });

            modelBuilder.Entity("appGIUCT.Domain.Entities.EnsayoCatedra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("docenteId")
                        .HasColumnType("int");

                    b.Property<int>("formacionAcademicaId")
                        .HasColumnType("int");

                    b.Property<int>("pkFormacionAcademica")
                        .HasColumnType("int");

                    b.Property<int>("tutorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("docenteId");

                    b.HasIndex("formacionAcademicaId");

                    b.HasIndex("tutorId");

                    b.ToTable("EnsayoCatedra");
                });

            modelBuilder.Entity("appGIUCT.Domain.Entities.Facultad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("pkUniversidad")
                        .HasColumnType("int");

                    b.Property<int>("universidadId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("universidadId");

                    b.ToTable("Facultad");
                });

            modelBuilder.Entity("appGIUCT.Domain.Entities.FormacionAcademica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("facultadId")
                        .HasColumnType("int");

                    b.Property<DateTime>("fechaFin")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("fechaInicio")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("pkFacultad")
                        .HasColumnType("int");

                    b.Property<int>("pkIniciativa")
                        .HasColumnType("int");

                    b.Property<string>("titulo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("facultadId");

                    b.ToTable("FormacionAcademica");
                });

            modelBuilder.Entity("appGIUCT.Domain.Entities.IniciativaDeInvestigacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("codigo")
                        .HasColumnType("int");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("duracion")
                        .HasColumnType("int");

                    b.Property<string>("estado")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("fechaFin")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("fechaInicio")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("formacionAcademicaId")
                        .HasColumnType("int");

                    b.Property<string>("titulo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("formacionAcademicaId");

                    b.ToTable("IniciativaDeInvestigacion");
                });

            modelBuilder.Entity("appGIUCT.Domain.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Dni")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("celular")
                        .HasColumnType("int");

                    b.Property<int>("cuil")
                        .HasColumnType("int");

                    b.Property<int>("direccionPostal")
                        .HasColumnType("int");

                    b.Property<string>("emailInsitucional")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("emailPersonal")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("horasSemInvestigadas")
                        .HasColumnType("int");

                    b.Property<int>("telefono")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("appGIUCT.Domain.Entities.Pid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("codigo")
                        .HasColumnType("int");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("duracion")
                        .HasColumnType("int");

                    b.Property<string>("estado")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("fechaFin")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("fechaInicio")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("formacionAcademicaId")
                        .HasColumnType("int");

                    b.Property<int>("pkFormacionAcademica")
                        .HasColumnType("int");

                    b.Property<string>("tipo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("titulo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("formacionAcademicaId");

                    b.HasIndex("pkFormacionAcademica")
                        .IsUnique();

                    b.ToTable("Pid");
                });

            modelBuilder.Entity("appGIUCT.Domain.Entities.PracticaProfesionalizante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("docenteId")
                        .HasColumnType("int");

                    b.Property<int>("formacionAcademicaId")
                        .HasColumnType("int");

                    b.Property<int>("pkFormacionAcademica")
                        .HasColumnType("int");

                    b.Property<int>("tutorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("docenteId");

                    b.HasIndex("formacionAcademicaId");

                    b.HasIndex("tutorId");

                    b.ToTable("PracticaProfesionalizante");
                });

            modelBuilder.Entity("appGIUCT.Domain.Entities.PracticaSupervisadaIngenieria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("docenteSupervisorId")
                        .HasColumnType("int");

                    b.Property<int>("formacionAcademicaId")
                        .HasColumnType("int");

                    b.Property<int>("pkFormacionAcademica")
                        .HasColumnType("int");

                    b.Property<int>("tutorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("docenteSupervisorId");

                    b.HasIndex("formacionAcademicaId");

                    b.HasIndex("tutorId");

                    b.ToTable("PracticaSupervisadaIngenieria");
                });

            modelBuilder.Entity("appGIUCT.Domain.Entities.ProyectoFinalIngenieria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("directorId")
                        .HasColumnType("int");

                    b.Property<int>("formacionAcademicaId")
                        .HasColumnType("int");

                    b.Property<string>("fuenteFinanciemiento")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("pkFormacionAcademica")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("directorId");

                    b.HasIndex("formacionAcademicaId");

                    b.ToTable("ProyectoFinalIngenieria");
                });

            modelBuilder.Entity("appGIUCT.Domain.Entities.TesinaLicenciatura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("directorId")
                        .HasColumnType("int");

                    b.Property<int>("formacionAcademicaId")
                        .HasColumnType("int");

                    b.Property<string>("fuenteFinanciamiento")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("pkFormacionAcademica")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("directorId");

                    b.HasIndex("formacionAcademicaId");

                    b.ToTable("TesinaLicenciatura");
                });

            modelBuilder.Entity("appGIUCT.Domain.Entities.TesisPosgrado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("directorId")
                        .HasColumnType("int");

                    b.Property<int>("formacionAcademicaId")
                        .HasColumnType("int");

                    b.Property<string>("fuenteFinanciamiento")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("pkFormacionAcademica")
                        .HasColumnType("int");

                    b.Property<string>("tipo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("directorId");

                    b.HasIndex("formacionAcademicaId");

                    b.ToTable("TesisPosgrado");
                });

            modelBuilder.Entity("appGIUCT.Domain.Entities.Universidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Universidades");
                });

            modelBuilder.Entity("FormacionAcademicaPerson", b =>
                {
                    b.HasOne("appGIUCT.Domain.Entities.FormacionAcademica", null)
                        .WithMany()
                        .HasForeignKey("formacionAcademicasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("appGIUCT.Domain.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("personId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IniciativaDeInvestigacionPerson", b =>
                {
                    b.HasOne("appGIUCT.Domain.Entities.IniciativaDeInvestigacion", null)
                        .WithMany()
                        .HasForeignKey("iniciativaDeInvestigacionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("appGIUCT.Domain.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("personId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonPid", b =>
                {
                    b.HasOne("appGIUCT.Domain.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("personId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("appGIUCT.Domain.Entities.Pid", null)
                        .WithMany()
                        .HasForeignKey("pidsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("appGIUCT.Domain.Entities.EnsayoCatedra", b =>
                {
                    b.HasOne("appGIUCT.Domain.Entities.Person", "docente")
                        .WithMany()
                        .HasForeignKey("docenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("appGIUCT.Domain.Entities.FormacionAcademica", "formacionAcademica")
                        .WithMany()
                        .HasForeignKey("formacionAcademicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("appGIUCT.Domain.Entities.Person", "tutor")
                        .WithMany()
                        .HasForeignKey("tutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("docente");

                    b.Navigation("formacionAcademica");

                    b.Navigation("tutor");
                });

            modelBuilder.Entity("appGIUCT.Domain.Entities.Facultad", b =>
                {
                    b.HasOne("appGIUCT.Domain.Entities.Universidad", "universidad")
                        .WithMany()
                        .HasForeignKey("universidadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("universidad");
                });

            modelBuilder.Entity("appGIUCT.Domain.Entities.FormacionAcademica", b =>
                {
                    b.HasOne("appGIUCT.Domain.Entities.Facultad", "facultad")
                        .WithMany()
                        .HasForeignKey("facultadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("facultad");
                });

            modelBuilder.Entity("appGIUCT.Domain.Entities.IniciativaDeInvestigacion", b =>
                {
                    b.HasOne("appGIUCT.Domain.Entities.FormacionAcademica", "formacionAcademica")
                        .WithMany()
                        .HasForeignKey("formacionAcademicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("formacionAcademica");
                });

            modelBuilder.Entity("appGIUCT.Domain.Entities.Pid", b =>
                {
                    b.HasOne("appGIUCT.Domain.Entities.FormacionAcademica", "formacionAcademica")
                        .WithMany()
                        .HasForeignKey("formacionAcademicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("appGIUCT.Domain.Entities.FormacionAcademica", null)
                        .WithOne("Pid")
                        .HasForeignKey("appGIUCT.Domain.Entities.Pid", "pkFormacionAcademica")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("formacionAcademica");
                });

            modelBuilder.Entity("appGIUCT.Domain.Entities.PracticaProfesionalizante", b =>
                {
                    b.HasOne("appGIUCT.Domain.Entities.Person", "docente")
                        .WithMany()
                        .HasForeignKey("docenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("appGIUCT.Domain.Entities.FormacionAcademica", "formacionAcademica")
                        .WithMany()
                        .HasForeignKey("formacionAcademicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("appGIUCT.Domain.Entities.Person", "tutor")
                        .WithMany()
                        .HasForeignKey("tutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("docente");

                    b.Navigation("formacionAcademica");

                    b.Navigation("tutor");
                });

            modelBuilder.Entity("appGIUCT.Domain.Entities.PracticaSupervisadaIngenieria", b =>
                {
                    b.HasOne("appGIUCT.Domain.Entities.Person", "docenteSupervisor")
                        .WithMany()
                        .HasForeignKey("docenteSupervisorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("appGIUCT.Domain.Entities.FormacionAcademica", "formacionAcademica")
                        .WithMany()
                        .HasForeignKey("formacionAcademicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("appGIUCT.Domain.Entities.Person", "tutor")
                        .WithMany()
                        .HasForeignKey("tutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("docenteSupervisor");

                    b.Navigation("formacionAcademica");

                    b.Navigation("tutor");
                });

            modelBuilder.Entity("appGIUCT.Domain.Entities.ProyectoFinalIngenieria", b =>
                {
                    b.HasOne("appGIUCT.Domain.Entities.Person", "director")
                        .WithMany()
                        .HasForeignKey("directorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("appGIUCT.Domain.Entities.FormacionAcademica", "formacionAcademica")
                        .WithMany()
                        .HasForeignKey("formacionAcademicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("director");

                    b.Navigation("formacionAcademica");
                });

            modelBuilder.Entity("appGIUCT.Domain.Entities.TesinaLicenciatura", b =>
                {
                    b.HasOne("appGIUCT.Domain.Entities.Person", "director")
                        .WithMany()
                        .HasForeignKey("directorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("appGIUCT.Domain.Entities.FormacionAcademica", "formacionAcademica")
                        .WithMany()
                        .HasForeignKey("formacionAcademicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("director");

                    b.Navigation("formacionAcademica");
                });

            modelBuilder.Entity("appGIUCT.Domain.Entities.TesisPosgrado", b =>
                {
                    b.HasOne("appGIUCT.Domain.Entities.Person", "director")
                        .WithMany()
                        .HasForeignKey("directorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("appGIUCT.Domain.Entities.FormacionAcademica", "formacionAcademica")
                        .WithMany()
                        .HasForeignKey("formacionAcademicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("director");

                    b.Navigation("formacionAcademica");
                });

            modelBuilder.Entity("appGIUCT.Domain.Entities.FormacionAcademica", b =>
                {
                    b.Navigation("Pid")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
