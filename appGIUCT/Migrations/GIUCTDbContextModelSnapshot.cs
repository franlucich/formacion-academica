// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace appGIUCT.Migrations
{
    [DbContext(typeof(GIUCTDbContext))]
    partial class GIUCTDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("appGIUCT.Domain.Entities.Facultad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Facultad");
                });

            modelBuilder.Entity("appGIUCT.Domain.Entities.FormacionAcademica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("fechaFin")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("fechaInicio")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("titulo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("FormacionAcademica");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FormacionAcademica");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("appGIUCT.Domain.Entities.IniciativaDeInvestigacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("codigo")
                        .HasColumnType("int");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("duracion")
                        .HasColumnType("int");

                    b.Property<string>("estado")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("fechaFin")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("fechaInicio")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("titulo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("IniciativaDeInvestigacion");
                });

            modelBuilder.Entity("appGIUCT.Domain.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Dni")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("celular")
                        .HasColumnType("int");

                    b.Property<int>("cuil")
                        .HasColumnType("int");

                    b.Property<int>("direccionPostal")
                        .HasColumnType("int");

                    b.Property<string>("emailInsitucional")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("emailPersonal")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("horasSemInvestigadas")
                        .HasColumnType("int");

                    b.Property<int>("telefono")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("appGIUCT.Domain.Entities.Pid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("codigo")
                        .HasColumnType("int");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("duracion")
                        .HasColumnType("int");

                    b.Property<string>("estado")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("fechaFin")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("fechaInicio")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("tipo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("titulo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Pid");
                });

            modelBuilder.Entity("appGIUCT.Domain.Entities.Universidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Universidades");
                });

            modelBuilder.Entity("appGIUCT.Domain.Entities.EnsayoCatedra", b =>
                {
                    b.HasBaseType("appGIUCT.Domain.Entities.FormacionAcademica");

                    b.Property<int>("docenteId")
                        .HasColumnType("int");

                    b.Property<int>("tutorId")
                        .HasColumnType("int");

                    b.HasIndex("docenteId");

                    b.HasIndex("tutorId");

                    b.HasDiscriminator().HasValue("EnsayoCatedra");
                });

            modelBuilder.Entity("appGIUCT.Domain.Entities.PracticaProfesionalizante", b =>
                {
                    b.HasBaseType("appGIUCT.Domain.Entities.FormacionAcademica");

                    b.Property<int>("docenteId")
                        .HasColumnType("int");

                    b.Property<int>("tutorId")
                        .HasColumnType("int");

                    b.HasIndex("docenteId");

                    b.HasIndex("tutorId");

                    b.ToTable("FormacionAcademica", t =>
                        {
                            t.Property("docenteId")
                                .HasColumnName("PracticaProfesionalizante_docenteId");

                            t.Property("tutorId")
                                .HasColumnName("PracticaProfesionalizante_tutorId");
                        });

                    b.HasDiscriminator().HasValue("PracticaProfesionalizante");
                });

            modelBuilder.Entity("appGIUCT.Domain.Entities.PracticaSupervisadaIngenieria", b =>
                {
                    b.HasBaseType("appGIUCT.Domain.Entities.FormacionAcademica");

                    b.Property<int>("docenteSupervisorId")
                        .HasColumnType("int");

                    b.Property<int>("tutorId")
                        .HasColumnType("int");

                    b.HasIndex("docenteSupervisorId");

                    b.HasIndex("tutorId");

                    b.ToTable("FormacionAcademica", t =>
                        {
                            t.Property("tutorId")
                                .HasColumnName("PracticaSupervisadaIngenieria_tutorId");
                        });

                    b.HasDiscriminator().HasValue("PracticaSupervisadaIngenieria");
                });

            modelBuilder.Entity("appGIUCT.Domain.Entities.ProyectoFinalIngenieria", b =>
                {
                    b.HasBaseType("appGIUCT.Domain.Entities.FormacionAcademica");

                    b.Property<int>("directorId")
                        .HasColumnType("int");

                    b.Property<string>("fuenteFinanciemiento")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasIndex("directorId");

                    b.HasDiscriminator().HasValue("ProyectoFinalIngenieria");
                });

            modelBuilder.Entity("appGIUCT.Domain.Entities.TesinaLicenciatura", b =>
                {
                    b.HasBaseType("appGIUCT.Domain.Entities.FormacionAcademica");

                    b.Property<int>("directorId")
                        .HasColumnType("int");

                    b.Property<string>("fuenteFinanciamiento")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasIndex("directorId");

                    b.ToTable("FormacionAcademica", t =>
                        {
                            t.Property("directorId")
                                .HasColumnName("TesinaLicenciatura_directorId");
                        });

                    b.HasDiscriminator().HasValue("TesinaLicenciatura");
                });

            modelBuilder.Entity("appGIUCT.Domain.Entities.TesisPosgrado", b =>
                {
                    b.HasBaseType("appGIUCT.Domain.Entities.FormacionAcademica");

                    b.Property<int>("directorId")
                        .HasColumnType("int");

                    b.Property<string>("fuenteFinanciamiento")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("tipo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasIndex("directorId");

                    b.ToTable("FormacionAcademica", t =>
                        {
                            t.Property("directorId")
                                .HasColumnName("TesisPosgrado_directorId");

                            t.Property("fuenteFinanciamiento")
                                .HasColumnName("TesisPosgrado_fuenteFinanciamiento");
                        });

                    b.HasDiscriminator().HasValue("TesisPosgrado");
                });

            modelBuilder.Entity("appGIUCT.Domain.Entities.EnsayoCatedra", b =>
                {
                    b.HasOne("appGIUCT.Domain.Entities.Person", "docente")
                        .WithMany()
                        .HasForeignKey("docenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("appGIUCT.Domain.Entities.Person", "tutor")
                        .WithMany()
                        .HasForeignKey("tutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("docente");

                    b.Navigation("tutor");
                });

            modelBuilder.Entity("appGIUCT.Domain.Entities.PracticaProfesionalizante", b =>
                {
                    b.HasOne("appGIUCT.Domain.Entities.Person", "docente")
                        .WithMany()
                        .HasForeignKey("docenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("appGIUCT.Domain.Entities.Person", "tutor")
                        .WithMany()
                        .HasForeignKey("tutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("docente");

                    b.Navigation("tutor");
                });

            modelBuilder.Entity("appGIUCT.Domain.Entities.PracticaSupervisadaIngenieria", b =>
                {
                    b.HasOne("appGIUCT.Domain.Entities.Person", "docenteSupervisor")
                        .WithMany()
                        .HasForeignKey("docenteSupervisorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("appGIUCT.Domain.Entities.Person", "tutor")
                        .WithMany()
                        .HasForeignKey("tutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("docenteSupervisor");

                    b.Navigation("tutor");
                });

            modelBuilder.Entity("appGIUCT.Domain.Entities.ProyectoFinalIngenieria", b =>
                {
                    b.HasOne("appGIUCT.Domain.Entities.Person", "director")
                        .WithMany()
                        .HasForeignKey("directorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("director");
                });

            modelBuilder.Entity("appGIUCT.Domain.Entities.TesinaLicenciatura", b =>
                {
                    b.HasOne("appGIUCT.Domain.Entities.Person", "director")
                        .WithMany()
                        .HasForeignKey("directorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("director");
                });

            modelBuilder.Entity("appGIUCT.Domain.Entities.TesisPosgrado", b =>
                {
                    b.HasOne("appGIUCT.Domain.Entities.Person", "director")
                        .WithMany()
                        .HasForeignKey("directorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("director");
                });
#pragma warning restore 612, 618
        }
    }
}
